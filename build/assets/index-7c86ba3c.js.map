{"version":3,"file":"index-7c86ba3c.js","sources":["../../src/components/Nav/index.tsx","../../src/components/Header/index.tsx","../../src/components/Board/index.tsx","../../src/components/Card/CardImage/index.tsx","../../src/helpers/cards.ts","../../src/store/index.ts","../../src/helpers/string.ts","../../src/helpers/game.ts","../../src/components/Card/CardProperties/index.tsx","../../src/components/Card/index.tsx","../../src/components/Grid/index.tsx","../../src/components/MessageBox/index.tsx","../../src/components/Status/index.tsx","../../src/components/Deck/index.tsx","../../src/pages/Game/index.tsx","../../src/pages/Home/index.tsx","../../src/pages/Instructions/index.tsx","../../src/pages/ViewCards/index.tsx","../../src/layouts/App/index.tsx","../../src/main.tsx"],"sourcesContent":["import { NavLink } from 'react-router-dom';\n\nimport style from './style.module.css';\n\ninterface NavLinkProps {\n\tisActive: boolean;\n\tisPending: boolean;\n}\n\nfunction checkNavItemStatus({ isActive, isPending }: NavLinkProps) {\n\tif (isPending) return style.pending;\n\tif (isActive) return style.active;\n\treturn '';\n}\n\n/**\n * Nav\n * @return {React.Element} Nav component\n */\nfunction Nav() {\n\treturn (\n\t\t<nav className={style.nav}>\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink\n\t\t\t\t\t\tto=\"/startgame\"\n\t\t\t\t\t\tclassName={(props) => checkNavItemStatus(props)}\n\t\t\t\t\t>Start game\n\t\t\t\t\t</NavLink>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink\n\t\t\t\t\t\tto=\"/instructions\"\n\t\t\t\t\t\tclassName={(props) => checkNavItemStatus(props)}\n\t\t\t\t\t>Instructions\n\t\t\t\t\t</NavLink>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink\n\t\t\t\t\t\tto=\"/viewcards\"\n\t\t\t\t\t\tclassName={(props) => checkNavItemStatus(props)}\n\t\t\t\t\t>View Cards\n\t\t\t\t\t</NavLink>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</nav>\n\t);\n}\n\nexport default Nav;\n","import { Link } from 'react-router-dom';\n\nimport Nav from '../Nav';\n\nimport style from './style.module.css';\n\ninterface HeaderProps {\n\ttitle: string;\n}\n\n/**\n * Header\n * @return {React.Element} Header component\n */\nfunction Header({ title }: HeaderProps) {\n\treturn (\n\t\t<header className={style.header}>\n\t\t\t<h1><Link to=\"/\">{title}</Link></h1>\n\t\t\t<Nav />\n\t\t</header>\n\t);\n}\n\nexport default Header;\n","import { PropsWithChildren } from 'react';\n\nimport style from './style.module.css';\n\n/**\n * Board\n *\n * Container for the game elements\n *\n * @param {PropsWithChildren} { children }\n * @return {React.Element}\n */\nfunction Board({ children }: PropsWithChildren) {\n\treturn (\n\t\t<section className={style.board}>\n\t\t\t{children}\n\t\t</section>\n\t);\n}\n\nexport default Board;\n","// import { useState } from 'react';\n\nimport style from './style.module.css';\n\ninterface CardImageProps {\n\tsrc: string;\n\talt: string;\n\t// count?: number;\n}\n\n/**\n * CardImage\n *\n * @param {CardImageProps} { src, alt, handleImageLoad }\n * @return {React.Element} CardImage component\n */\nfunction CardImage({ src, alt }: CardImageProps) {\n\t\n\t// const [ isImageLoaded, setIsImageLoaded ] = useState(false);\n\n\t// function handleImageLoad() {\n\t// \tsetIsImageLoaded(true);\n\t// }\n\t\n\tconst cn = [\n\t\tstyle.cardImage,\n\t\t// !isImageLoaded && style.hidden\n\t].join(' ');\n\n\treturn (\n\t\t<img\n\t\t\twidth=\"250\"\n\t\t\theight=\"125\"\n\t\t\tclassName={cn}\n\t\t\t// loading={count && count > 10 ? 'lazy' : 'eager'}\n\t\t\tsrc={src}\n\t\t\talt={alt}\n\t\t\t// onLoad={handleImageLoad}\n\t\t/>\n\t);\n\n}\n\nexport default CardImage;\n","import { cards } from '../store';\n\nimport { CardType } from '../types';\n\n/**\n * Fisher-Yates Shuffle\n * https://stackoverflow.com/a/59837259/1377002\n *\n * @param {CardType[]} arr\n * @return {CardType[]}\n */\nexport function shuffleCards(arr: CardType[]) {\n\n\tconst arrTemp = structuredClone(arr);\n\tlet i = arrTemp.length;\n\tlet j;\n\tlet temp;\n\t\n\twhile (--i > 0) {\n\t\tj = Math.floor(Math.random() * (i + 1));\n\t\ttemp = arr[j];\n\t\tarr[j] = arr[i];\n\t\tarr[i] = temp;\n\t}\n\n\treturn arr;\n\n}\n\n/**\n * getThreeRandomCards\n *\n * Takes a copy at the cards state, shuffles\n * that copy, and returns the first three\n *\n * @return {array}\n */\nexport function getThreeRandomCards() {\n\treturn shuffleCards(cards.peek()).slice(0, 3);\n}\n\n/**\n * sortCards\n *\n * Returns an array of cards sorted by name\n *\n * @return {array}\n */\nexport function sortCards(cards: CardType[]) {\n\treturn cards.sort((a, b) => {\n\t\treturn a.name.localeCompare(b.name);\n\t});\n}\n","import { signal, computed } from '@preact/signals-react';\n\nimport { CardType, MessageType } from '../types';\n\nimport cardsData from '../data/cards.json';\nimport availableMessagesData from '../data/messages.json';\n\nimport { sortCards } from '../helpers/cards';\n\nexport const cards = signal(cardsData as CardType[]);\n\nexport const sortedCards = computed(() => sortCards(cards.value));\n\nexport const availableMessages = signal(availableMessagesData);\n\nexport const messages = signal([] as MessageType[]);\n\nexport const deckComputer = signal([] as CardType[]);\nexport const deckBoard = signal([] as CardType[]);\nexport const deckHuman = signal([] as CardType[]);\n\nexport const currentComputerCard = computed(() => {\n\treturn deckComputer.value.at(-1);\n});\n\nexport const computerCardVisible = signal(false);\n\nexport const showNextRoundButton = signal(false);\n\nexport const winner = signal('');\n","/* eslint-disable import/prefer-default-export */\n\n/**\n * toCapitalCase\n *\n * @export\n * @param {string} str\n * @return {string}\n */\nexport function toCapitalCase(str: string) {\n\treturn str.split(' ').map(word => {\n\t\treturn `${word[0].toUpperCase()}${word.slice(1)}`;\n\t}).join(' ');\n}\n","import {\n\tavailableMessages,\n\tcards,\n\tcurrentComputerCard,\n\tcomputerCardVisible,\n\tdeckComputer,\n\tdeckHuman,\n\tshowNextRoundButton,\n\tmessages,\n\twinner\n} from '../store';\n\nimport { CardType } from '../types';\n\nimport { toCapitalCase } from './string';\n\nimport { shuffleCards } from './cards';\n\n/**\n * getComputerCardValue\n *\n * @param {string} name\n * @return {number}\n */\nfunction getComputerCardDetails(name: string) {\n\tconst card = currentComputerCard.peek();\n\treturn {\n\t\tname: card?.name as string,\n\t\tproperty: {\n\t\t\tname,\n\t\t\tvalue: card?.properties.find(prop => prop.name === name)?.value as number\n\t\t}\n\t};\n}\n\n/**\n * getUUID\n *\n * Returns a unique id as a string\n *\n * @return {string}\n */\nfunction getUUID() {\n\treturn crypto.randomUUID();\n}\n\n/**\n * resetMessageBox\n *\n */\nfunction resetMessageBox() {\n\tmessages.value = [];\n}\n\n/**\n * updateMessageBox\n *\n * @param {string} message\n */\nfunction updateMessageBox(message: string) {\n\tmessages.value.push({ id: getUUID(), text: message });\n}\n\n/**\n * initialiseGame\n *\n * @export\n */\nexport function initialiseGame() {\n\n\tconst shuffled = shuffleCards(cards.peek());\n\tconst len = shuffled.length;\n\n\tdeckComputer.value = shuffled.slice(0, len / 2);\n\tdeckHuman.value = shuffled.slice(len / 2, len);\n\n\tresetMessageBox();\n\tupdateMessageBox(availableMessages.peek().humanstart);\n\tupdateMessageBox(availableMessages.peek().clickstat);\n}\n\n/**\n * calculateWin\n *\n * @export\n * @param {string} name\n * @param {number} value\n */\nexport function calculateWin(animal: string, name: string, value: number) {\n\n\tcomputerCardVisible.value = true;\n\n\tconst cardComputerDetails = getComputerCardDetails(name);\n\n\tresetMessageBox();\n\n\tif (value > cardComputerDetails.property.value) {\n\t\twinner.value = 'human';\n\t\tupdateMessageBox(availableMessages.peek().humanwin);\n\t\tupdateMessageBox(`(${toCapitalCase(animal)} beats ${toCapitalCase(cardComputerDetails.name)} on ${name})`);\n\t}\n\n\tif (cardComputerDetails.property.value > value) {\n\t\twinner.value = 'computer';\n\t\tupdateMessageBox(availableMessages.peek().computerwin);\n\t\tupdateMessageBox(`(${toCapitalCase(cardComputerDetails.name)} beats ${toCapitalCase(animal)} on ${name})`);\n\t}\n\n\tif (cardComputerDetails.property.value === value) {\n\t\twinner.value = 'tie';\n\t\tupdateMessageBox(availableMessages.peek().tie);\n\t}\n\n\tshowNextRoundButton.value = true;\n\n}\n\n/**\n * playNextRound\n *\n * @export\n */\nexport function playNextRound() {\n\t\n\tcomputerCardVisible.value = false;\n\tshowNextRoundButton.value = false;\n\n\tresetMessageBox();\n\n\tif (winner.value === 'human') {\n\t\tconst computerCard = deckComputer.value.pop() as CardType;\n\t\tconst humanCard = deckHuman.value.pop() as CardType;\n\t\tdeckHuman.value = [ humanCard, computerCard, ...deckHuman.peek() ];\n\t\tupdateMessageBox(availableMessages.value.humanadded);\n\t\tupdateMessageBox(availableMessages.value.clickstat);\n\t}\n\n\tif (winner.value === 'computer') {\n\t\tconst humanCard = deckHuman.value.pop() as CardType;\n\t\tconst computerCard = deckComputer.value.pop() as CardType;\n\t\tdeckComputer.value = [ computerCard, humanCard, ...deckComputer.peek() ];\n\t}\n\n\tif (winner.value === 'tie') {\n\t\t// const computerCard = decks.value.computer.pop() as CardType;\n\t\t// decks.value.human.unshift(computerCard);\n\t}\n\n}\n","import { SyntheticEvent, KeyboardEvent } from 'react';\n\nimport { PropertyType } from '../../../types';\n\nimport { calculateWin } from '../../../helpers/game';\n\nimport style from './style.module.css';\n\ninterface CardPropertiesProps {\n\tanimal: string;\n\tproperties: PropertyType[];\n\tinteractive: boolean;\n}\n\n/**\n * In case the properties in the data are not correctly added\n * this function sorts them before rendering\n *\n * @param {PropertyType} a\n * @param {PropertyType} b\n * @return {array}\n */\nfunction sortPropertiesbyName(a: PropertyType, b: PropertyType) {\n\treturn a.name.localeCompare(b.name);\n}\n\n/**\n * CardProperties\n *\n * A list of card properties (or statistics). If \"interactive\" the\n * component returns a list of buttons, otherwise a simple list\n *\n * @param {CardPropertiesProps} { properties, interactive }\n * @return {React.Element} CardProperties component\n */\nfunction CardProperties({ animal, properties, interactive }: CardPropertiesProps) {\n\t\n\tfunction handleKey(e: KeyboardEvent) {\n\t\tif (e.key === 'Enter') {\n\t\t\tconst { dataset: { name, value } } = e.target as HTMLButtonElement;\n\t\t\tif (name && value) calculateWin(animal, name, Number(value));\n\t\t}\n\t}\n\n\tfunction handleClick(e: SyntheticEvent) {\n\t\tconst { dataset: { name, value } } = e.currentTarget as HTMLButtonElement;\n\t\tif (name && value) calculateWin(animal, name, Number(value));\n\t}\n\t\n\treturn (\n\t\t<ul className={style.properties}>\n\t\t\t{properties.sort(sortPropertiesbyName).map((property: PropertyType) => {\n\n\t\t\t\tconst cn = [\n\t\t\t\t\tstyle.property,\n\t\t\t\t\tinteractive && style.interactive\n\t\t\t\t].join(' ');\n\n\t\t\t\tif (interactive) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li key={property.id} className={cn}>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\tdata-name={property.name}\n\t\t\t\t\t\t\t\tdata-value={property.value}\n\t\t\t\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\t\t\t\tonKeyDown={handleKey}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span>{property.name}</span>\n\t\t\t\t\t\t\t\t<span>{property.value}</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn (\n\t\t\t\t\t<li key={property.id} className={cn}>\n\t\t\t\t\t\t<span>{property.name}</span>\n\t\t\t\t\t\t<span>{property.value}</span>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\n\t\t\t})}\n\t\t</ul>\n\t);\n}\n\nexport default CardProperties;\n","import { CardType } from '../../types';\n\nimport CardImage from './CardImage';\nimport CardProperties from './CardProperties';\n\nimport style from './style.module.css';\n\n/**\n * Card\n *\n * A simple card component with a header, and image, and\n * a set of properties. The card can be toggled between\n * interactive/non-interactive. An interactive card has\n * slightly different styling, and has buttons.\n *\n * @param {CardType} { name, avatar, properties }\n * @return {React.Element} Card component\n */\nfunction Card(props: CardType) {\n\t\n\tconst {\n\t\tname,\n\t\timage,\n\t\tvisible = true,\n\t\tproperties,\n\t\tinteractive = false,\n\t\t// count\n\t} = props;\n\n\tconst containerCn = [\n\t\tstyle.container\n\t].join(' ');\n\n\tconst cardCn = [\n\t\tstyle.card,\n\t\t!visible && style.invisible,\n\t\tinteractive && style.interactive\n\t].join(' ');\n\t\n\treturn (\n\t\t<section className={containerCn}>\n\t\t\t<section className={cardCn}>\n\t\t\t\t\n\t\t\t\t<header className={style.name}>\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t</header>\n\n\t\t\t\t<CardImage\n\t\t\t\t\tsrc={`images/${image.name}`}\n\t\t\t\t\talt={image.alt}\n\t\t\t\t\t// count={count}\n\t\t\t\t/>\n\n\t\t\t\t<CardProperties\n\t\t\t\t\tanimal={name}\n\t\t\t\t\tproperties={properties}\n\t\t\t\t\tinteractive={interactive}\n\t\t\t\t/>\n\n\t\t\t</section>\n\n\t\t</section>\n\t);\n\n}\n\nexport default Card;\n","import { PropsWithChildren } from 'react';\n\nimport style from './style.module.css';\n\nfunction Grid({ children }: PropsWithChildren) {\n\treturn (\n\t\t<section className={style.grid}>\n\t\t\t{children}\n\t\t</section>\n\t);\n}\n\nexport default Grid;\n","import { messages, showNextRoundButton } from '../../store';\n\nimport { playNextRound } from '../../helpers/game';\n\nimport style from './style.module.css';\n\n/**\n * MessageBox\n *\n * Describes the board situation for the player\n *\n * @param {MessageBoxProps} { sentences }\n * @return {React.Element}\n */\nfunction MessageBox() {\n\n\tfunction handleClick() {\n\t\tplayNextRound();\n\t}\n\n\treturn (\n\t\t<section className={style.messageBox}>\n\t\t\t{messages.value.map(message => {\n\t\t\t\treturn <p key={message.id}>{message.text}</p>;\n\t\t\t})}\n\t\t\t{showNextRoundButton.value && (\n\t\t\t\t<button\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\tclassName={style.nextRound}\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t>Play next round\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</section>\n\t);\n}\n\nexport default MessageBox;\n","import style from './style.module.css';\n\ninterface StatusProps {\n\ttype: string;\n\tnumberOfCards: number;\n\ttotalCards: number;\n}\n\n/**\n * Status\n *\n * Shows the status of the player's deck\n *\n * @param {StatusProps} { status }\n * @return {React.Element}\n */\nfunction Status({ type, numberOfCards, totalCards }: StatusProps) {\n\treturn (\n\t\t<section className={style.status}>\n\t\t\t<h3>{type}</h3>\n\t\t\t<p>{`${numberOfCards} / ${totalCards} cards`}</p>\n\t\t</section>\n\t);\n}\n\nexport default Status;\n","import { Status, Card } from '../index';\n\nimport { CardType } from '../../types';\n\nimport { computerCardVisible } from '../../store';\n\nimport style from './style.module.css';\n\ninterface DeckProps {\n\ttype: string;\n\tdeck: CardType[];\n\ttotalCards: number;\n\tinteractive?: boolean\n}\n\n/**\n * Deck\n *\n * The player (human/computer) deck\n *\n * @param {DeckProps} { deck }\n * @return {React.Element}\n */\nfunction Deck({ type, deck, totalCards, interactive }: DeckProps) {\n\n\tfunction isVisible() {\n\t\treturn (type === 'computer' && computerCardVisible.value === true)\n\t\t\t|| type === 'human';\n\t}\n\n\treturn (\n\t\t<section className={style.deck}>\n\t\t\t<Status\n\t\t\t\ttype={type}\n\t\t\t\tnumberOfCards={deck.length}\n\t\t\t\ttotalCards={totalCards}\n\t\t\t/>\n\t\t\t{deck.slice(-1).map((card, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\tid={card.id}\n\t\t\t\t\t\tvisible={isVisible()}\n\t\t\t\t\t\tname={card.name}\n\t\t\t\t\t\timage={card.image}\n\t\t\t\t\t\tproperties={card.properties}\n\t\t\t\t\t\tinteractive={interactive}\n\t\t\t\t\t\tcount={index}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t\t\n\t\t\t})}\n\t\t</section>\n\t);\n}\n\nexport default Deck;\n","import { useEffect } from 'react';\n\nimport { MessageBox, Deck, Board } from '../../components';\n\nimport { deckComputer, deckHuman, cards } from '../../store';\n\nimport { initialiseGame } from '../../helpers/game';\n\nimport style from './style.module.css';\n\n/**\n * Game\n *\n * Sets up the board for playing\n *\n * @return {React.Element} Game component/page\n */\nfunction Game() {\n\t\n\tuseEffect(() => {\n\t\tif (!deckHuman.value.length) initialiseGame();\n\t}, []);\n\t\n\tconst totalCards = cards.value.length;\n\n\treturn (\n\t\t<main className={style.main}>\n\t\t\t<Board>\n\t\t\t\t<Deck\n\t\t\t\t\ttype=\"computer\"\n\t\t\t\t\ttotalCards={totalCards}\n\t\t\t\t\tdeck={deckComputer.value}\n\t\t\t\t/>\n\t\t\t\t<MessageBox />\n\t\t\t\t{/* <Deck\n\t\t\t\t\ttype=\"board\"\n\t\t\t\t\ttotalCards={totalCards}\n\t\t\t\t\tdeck={decks.value.board}\n\t\t\t\t/> */}\n\t\t\t\t<Deck\n\t\t\t\t\ttype=\"human\"\n\t\t\t\t\ttotalCards={totalCards}\n\t\t\t\t\tdeck={deckHuman.value}\n\t\t\t\t\tinteractive\n\t\t\t\t/>\n\t\t\t</Board>\n\t\t</main>\n\t);\n}\n\nexport default Game;\n","/* eslint-disable max-len */\nimport style from './style.module.css';\n\nimport Card from '../../components/Card';\nimport Grid from '../../components/Grid';\n\nimport { getThreeRandomCards } from '../../helpers/cards';\n\n/**\n * Home\n *\n * Simple home page describing the game, and showing a random\n * sample of three cards\n *\n * @return {React.Element} Home component/page\n */\nfunction Home() {\n\treturn (\n\t\t<main className={style.main}>\n\t\t\t<section className={style.intro}>\n\t\t\t\tFerocious Beasts Top Trumps is a fun card game that can be enjoyed by everyone. The object of the game is to collect all of the cards in the deck by having the highest statistics on the card.\n\t\t\t</section>\n\t\t\t<Grid>\n\t\t\t\t{getThreeRandomCards().map((card, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\tid={card.id}\n\t\t\t\t\t\t\tname={card.name}\n\t\t\t\t\t\t\timage={card.image}\n\t\t\t\t\t\t\tproperties={card.properties}\n\t\t\t\t\t\t\tinteractive={false}\n\t\t\t\t\t\t\tcount={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Grid>\n\t\t</main>\n\t);\n}\n\nexport default Home;\n","/* eslint-disable max-len */\nimport style from './style.module.css';\n\n/**\n * Instructions\n *\n * @return {React.Element} Instructions component/page\n */\nfunction Instructions() {\n\treturn (\n\t\t<main className={style.main}>\n\t\t\t<section className={style.step}>\n\t\t\t\t<header>\n\t\t\t\t\t<h2>Goal</h2>\n\t\t\t\t</header>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>To collect all the cards.</li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t\t<section className={style.step}>\n\t\t\t\t<header>\n\t\t\t\t\t<h2>Setting up the game</h2>\n\t\t\t\t</header>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>The cards are divided between each player and dealt face down so player can see what another player is holding.</li>\n\t\t\t\t\t<li>Any remaining cards from the deal are placed face down in the center of the board.</li>\n\t\t\t\t\t<li>Only the top card of each player&apos;s stack should be visible.</li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t\t<section className={style.step}>\n\t\t\t\t<header>\n\t\t\t\t\t<h2>Playing the game</h2>\n\t\t\t\t</header>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>The current player chooses a statistic from their current card.</li>\n\t\t\t\t\t<li>The other players compare the same statistic from their current card.</li>\n\t\t\t\t\t<li>The player with the highest statistic value wins all the cards in play. These are added to the bottom of their stack.</li>\n\t\t\t\t\t<li>If there is a tie the cards in play are placed face up on the board and a new round begins. The winner of the next round gets all the cards.</li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t</main>\n\t);\n}\n\nexport default Instructions;\n","import Card from '../../components/Card';\nimport Grid from '../../components/Grid';\n\nimport { CardType } from '../../types';\n\nimport { sortedCards } from '../../store';\n\n/**\n * ViewCards\n *\n * Sorts and shows a grid of all the animal cards\n *\n * @return {React.Element} ViewCards component/page\n */\nfunction ViewCards() {\n\treturn (\n\t\t<main>\n\t\t\t<Grid>\n\t\t\t\t{sortedCards.peek().map((card: CardType, index: number) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\tid={card.id}\n\t\t\t\t\t\t\tname={card.name}\n\t\t\t\t\t\t\timage={card.image}\n\t\t\t\t\t\t\tproperties={card.properties}\n\t\t\t\t\t\t\tinteractive={false}\n\t\t\t\t\t\t\tcount={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Grid>\n\t\t</main>\n\t);\n}\n\nexport default ViewCards;\n","import { Routes, Route } from 'react-router-dom';\n\nimport Header from '../../components/Header';\n\nimport { Game, Home, Instructions, ViewCards } from '../../pages';\n\n/**\n * Sets up the header, and routing between the app pages\n *\n * @return {React.Element}\n */\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Header title=\"Ferocious Beasts Top Trumps\" />\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/\" element={<Home />} />\n\t\t\t\t<Route path=\"/startgame\" element={<Game />} />\n\t\t\t\t<Route path=\"/instructions\" element={<Instructions />} />\n\t\t\t\t<Route path=\"/viewcards\" element={<ViewCards />} />\n\t\t\t</Routes>\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './layouts/App';\n\nimport './styles/global.css';\n\nReactDOM.createRoot(document.querySelector('#root')!).render(\n\t<React.StrictMode>\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</React.StrictMode>,\n);\n"],"names":["checkNavItemStatus","isActive","isPending","style","Nav","jsx","NavLink","props","Header","title","jsxs","Link","Board","children","CardImage","src","alt","cn","shuffleCards","arr","i","j","temp","getThreeRandomCards","cards","sortCards","a","b","signal","cardsData","sortedCards","computed","availableMessages","availableMessagesData","messages","deckComputer","deckHuman","currentComputerCard","computerCardVisible","showNextRoundButton","winner","toCapitalCase","str","word","getComputerCardDetails","name","card","prop","getUUID","resetMessageBox","updateMessageBox","message","initialiseGame","shuffled","len","calculateWin","animal","value","cardComputerDetails","playNextRound","computerCard","humanCard","sortPropertiesbyName","CardProperties","properties","interactive","handleKey","e","handleClick","property","Card","image","visible","containerCn","cardCn","Grid","MessageBox","Status","type","numberOfCards","totalCards","Deck","deck","isVisible","index","Game","useEffect","Home","Instructions","ViewCards","App","Fragment","Routes","Route","ReactDOM","React","BrowserRouter"],"mappings":"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"}