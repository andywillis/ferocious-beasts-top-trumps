{"version":3,"file":"index-d539b3fb.js","sources":["../../src/components/Board/index.tsx","../../src/components/Card/CardImage/index.tsx","../../src/store/index.ts","../../src/helpers/string.ts","../../src/helpers/cards.ts","../../src/helpers/game.ts","../../src/components/Card/CardProperties/index.tsx","../../src/components/Card/index.tsx","../../src/components/Grid/index.tsx","../../src/components/Nav/index.tsx","../../src/components/Header/index.tsx","../../src/components/MessageBox/index.tsx","../../src/components/Status/index.tsx","../../src/components/Deck/index.tsx","../../src/pages/Game/index.tsx","../../src/pages/Home/index.tsx","../../src/pages/Instructions/index.tsx","../../src/pages/ViewCards/index.tsx","../../src/layouts/App/index.tsx","../../src/main.tsx"],"sourcesContent":["import { PropsWithChildren } from 'react';\n\nimport style from './style.module.css';\n\n/**\n * Board\n *\n * Container for the game elements\n *\n * @param {PropsWithChildren} { children }\n * @return {React.Element}\n */\nfunction Board({ children }: PropsWithChildren) {\n\treturn (\n\t\t<section className={style.board}>\n\t\t\t{children}\n\t\t</section>\n\t);\n}\n\nexport default Board;\n","import style from './style.module.css';\n\ninterface CardImageProps {\n\tsrc: string;\n}\n\n/**\n * CardImage\n *\n * @param {CardImageProps} { src, alt, handleImageLoad }\n * @return {React.Element} CardImage component\n */\nfunction CardImage({ src }: CardImageProps) {\n\n\tconst cn = [\n\t\tstyle.cardImage,\n\t\tstyle[src.replace('.webp', '')]\n\t].join(' ');\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cn}\n\t\t/>\n\t);\n\n}\n\nexport default CardImage;\n","import { signal, computed } from '@preact/signals-react';\n\nimport { CardType, MessageType } from '../types';\n\n// Data\nimport cardsData from '../data/cards.json';\nimport availableMessagesData from '../data/messages.json';\n\nexport const cards = signal(cardsData as CardType[]);\nexport const availableMessages = signal(availableMessagesData);\n\nexport const deckComputer = signal([] as CardType[]);\nexport const deckBoard = signal([] as CardType[]);\nexport const deckHuman = signal([] as CardType[]);\nexport const messages = signal([] as MessageType[]);\nexport const computerCardVisible = signal(false);\nexport const humanCardVisible = signal(true);\nexport const humanCardInteractive = signal(true);\nexport const showNextRoundButton = signal(false);\nexport const winner = signal('');\n\nexport const currentComputerCard = computed(() => {\n\treturn deckComputer.value.at(-1);\n});\n\nexport const currentHumanCard = computed(() => {\n\treturn deckHuman.value.at(-1);\n});\n","/* eslint-disable import/prefer-default-export */\n\n/**\n * toCapitalCase\n *\n * @export\n * @param {string} str\n * @return {string}\n */\nexport function toCapitalCase(str: string) {\n\treturn str.split(' ').map(word => {\n\t\treturn `${word[0].toUpperCase()}${word.slice(1)}`;\n\t}).join(' ');\n}\n","import { CardType, PropertyType } from '../types';\n\n/**\n * Fisher-Yates Shuffle\n * https://stackoverflow.com/a/59837259/1377002\n *\n * @param {CardType[] | PropertyType[]} arr\n * @return {CardType[] | PropertyType[]}\n */\nexport function shuffleArray(arr: object[]) {\n\n\tconst arrTemp = structuredClone(arr);\n\tlet i = arrTemp.length;\n\tlet j;\n\tlet temp;\n\t\n\twhile (--i > 0) {\n\t\tj = Math.floor(Math.random() * (i + 1));\n\t\ttemp = arr[j];\n\t\tarr[j] = arr[i];\n\t\tarr[i] = temp;\n\t}\n\n\treturn arr;\n\n}\n\n/**\n * getRandomCards\n *\n * Accept some cards, shuffles\n * them, and return an array of cards the length of\n * which is determined by the number param\n *\n * @param {CardType[]} cards\n * @param {number} number\n * @return {CardType[]}\n */\nexport function getRandomCards(cards: CardType[], number: number) {\n\treturn shuffleArray(cards).slice(0, number) as CardType[];\n}\n\n/**\n * getRandomProperties\n *\n * Takes a copy at the cards state, shuffles\n * that copy, and returns the first three\n *\n * @return {array}\n */\nexport function getRandomProperties(properties: PropertyType[], number: number) {\n\treturn shuffleArray(properties).slice(0, number) as PropertyType[];\n}\n\n/**\n * sortCards\n *\n * Returns an array of cards sorted by name\n *\n * @return {array}\n */\nexport function sortCards(cards: CardType[]) {\n\treturn cards.sort((a, b) => {\n\t\treturn a.name.localeCompare(b.name);\n\t});\n}\n","import {\n\tavailableMessages,\n\tcards,\n\tcurrentComputerCard,\n\tcurrentHumanCard,\n\tcomputerCardVisible,\n\thumanCardVisible,\n\tdeckComputer,\n\tdeckHuman,\n\tdeckBoard,\n\tshowNextRoundButton,\n\tmessages,\n\twinner,\n\thumanCardInteractive\n} from '../store';\n\nimport { CardType } from '../types';\n\nimport { toCapitalCase } from './string';\n\nimport { getRandomProperties, shuffleArray } from './cards';\n\n/**\n * getComputerCardValue\n *\n * @param {string} name\n * @return {number}\n */\nfunction getComputerCardDetails(name: string) {\n\tconst card = currentComputerCard.peek();\n\treturn {\n\t\tname: card?.name as string,\n\t\tproperty: {\n\t\t\tname,\n\t\t\tvalue: card?.properties.find(prop => prop.name === name)?.value as number\n\t\t}\n\t};\n}\n\n/**\n * getHumanCardValue\n *\n * @param {string} name\n * @return {number}\n */\nfunction getHumanCardDetails(name: string) {\n\tconst card = currentHumanCard.peek();\n\treturn {\n\t\tname: card?.name as string,\n\t\tproperty: {\n\t\t\tname,\n\t\t\tvalue: card?.properties.find(prop => prop.name === name)?.value as number\n\t\t}\n\t};\n}\n\n/**\n * getUUID\n *\n * Returns a unique id as a string\n *\n * @return {string}\n */\nfunction getUUID() {\n\treturn crypto.randomUUID();\n}\n\n/**\n * resetMessageBox\n *\n */\nfunction resetMessageBox() {\n\tmessages.value = [];\n}\n\n/**\n * updateMessageBox\n *\n * @param {string} message\n */\nfunction updateMessageBox(message: string, type?: string) {\n\tmessages.value.push({\n\t\tid: getUUID(),\n\t\ttype,\n\t\ttext: message\n\t});\n}\n\n/**\n * initialiseGame\n *\n * Reset state, update the message box\n *\n * @export\n */\nexport function initialiseGame() {\n\n\tconst shuffled = shuffleArray(cards.peek()) as CardType[];\n\tconst len = shuffled.length;\n\tdeckComputer.value = shuffled.slice(0, len / 2);\n\tdeckHuman.value = shuffled.slice(len / 2, len);\n\tdeckBoard.value = [];\n\n\tcomputerCardVisible.value = false;\n\thumanCardVisible.value = true;\n\thumanCardInteractive.value = true;\n\tshowNextRoundButton.value = false;\n\twinner.value = '';\n\tresetMessageBox();\n\n\tresetMessageBox();\n\tupdateMessageBox(availableMessages.peek().humanplay);\n\tupdateMessageBox(availableMessages.peek().clickstat);\n}\n\n/**\n * calculateWin\n *\n * We calculate a win after the human player has\n * clicked on an animal stat.\n *\n * @export\n * @param {string} name\n * @param {number} value\n */\nexport function calculateWin(animal: string, name: string, value: number, type: string) {\n\n\tcomputerCardVisible.value = true;\n\thumanCardInteractive.value = false;\n\n\tresetMessageBox();\n\n\tif (type === 'human') {\n\n\t\tconst cardComputerDetails = getComputerCardDetails(name);\n\n\t\tif (value > cardComputerDetails.property.value) {\n\t\t\twinner.value = 'human';\n\t\t\tupdateMessageBox(availableMessages.peek().humanwin);\n\t\t\tupdateMessageBox(toCapitalCase(name), 'underline');\n\t\t\tupdateMessageBox(`\n\t\t\t\t${toCapitalCase(animal)}\n\t\t\t\t(${value}) \n\t\t\t\tbeats \n\t\t\t\t${toCapitalCase(cardComputerDetails.name)}\n\t\t\t\t(${cardComputerDetails.property.value})\n\t\t\t`);\n\t\t}\n\t\n\t\tif (cardComputerDetails.property.value > value) {\n\t\t\twinner.value = 'computer';\n\t\t\tupdateMessageBox(availableMessages.peek().computerwin);\n\t\t\tupdateMessageBox(toCapitalCase(name), 'underline');\n\t\t\tupdateMessageBox(`\n\t\t\t\t${toCapitalCase(cardComputerDetails.name)} \n\t\t\t\t(${cardComputerDetails.property.value})\n\t\t\t\tbeats \n\t\t\t\t${toCapitalCase(animal)}\n\t\t\t\t(${value})\n\t\t\t`);\n\t\t}\n\t\n\t\tif (cardComputerDetails.property.value === value) {\n\t\t\twinner.value = 'tie';\n\t\t\tupdateMessageBox(availableMessages.peek().tie);\n\t\t\tupdateMessageBox(toCapitalCase(name), 'underline');\n\t\t\tupdateMessageBox(`\n\t\t\t\t${toCapitalCase(cardComputerDetails.name)} \n\t\t\t\t(${cardComputerDetails.property.value})\n\t\t\t\tmatches \n\t\t\t\t${toCapitalCase(animal)}\n\t\t\t\t(${value})\n\t\t\t`);\n\t\t}\n\n\t\tshowNextRoundButton.value = true;\n\n\t}\n\n\tif (type === 'computer') {\n\n\t\tupdateMessageBox('Computer to play. ');\n\n\t\tconst cardHumanDetails = getHumanCardDetails(name);\n\n\t\tif (value > cardHumanDetails.property.value) {\n\t\t\twinner.value = 'computer';\n\t\t\tupdateMessageBox(availableMessages.peek().computerwin);\n\t\t\tupdateMessageBox(toCapitalCase(name), 'underline');\n\t\t\tupdateMessageBox(`\n\t\t\t\t${toCapitalCase(animal)} \n\t\t\t\t(${value})\n\t\t\t\tbeats \n\t\t\t\t${toCapitalCase(cardHumanDetails.name)}\n\t\t\t\t(${cardHumanDetails.property.value})\n\t\t\t`);\n\t\t}\n\t\n\t\tif (cardHumanDetails.property.value > value) {\n\t\t\twinner.value = 'human';\n\t\t\tupdateMessageBox(availableMessages.peek().humanwin);\n\t\t\tupdateMessageBox(toCapitalCase(name), 'underline');\n\t\t\tupdateMessageBox(`\n\t\t\t\t${toCapitalCase(cardHumanDetails.name)} \n\t\t\t\t(${cardHumanDetails.property.value})\n\t\t\t\tbeats \n\t\t\t\t${toCapitalCase(animal)}\n\t\t\t\t(${value})\n\t\t\t`);\n\t\t}\n\t\n\t\tif (cardHumanDetails.property.value === value) {\n\t\t\twinner.value = 'tie';\n\t\t\tupdateMessageBox(availableMessages.peek().tie);\n\t\t\tupdateMessageBox(toCapitalCase(name), 'underline');\n\t\t\tupdateMessageBox(`\n\t\t\t\t${toCapitalCase(cardHumanDetails.name)} \n\t\t\t\t(${cardHumanDetails.property.value})\n\t\t\t\tmatches \n\t\t\t\t${toCapitalCase(animal)}\n\t\t\t\t(${value})\n\t\t\t`);\n\t\t}\n\n\t\tshowNextRoundButton.value = true;\n\t\t\n\t}\n\n}\n\n/**\n * playNextRound\n *\n * We calculate the new positions of the cards in the decks, and display a\n * corresponding message, only after clicking on the next round button.\n *\n * For each win we recreate a new deck with the computer/human cards,\n * and any cards on the board from a tie, and then update the losers deck.\n *\n * For a tie we add the cards to the board deck - whoever wins the next round\n * gets the losers's card, and all the cards on the board.\n *\n * @export\n */\nexport function playNextRound() {\n\t\n\tresetMessageBox();\n\n\tif (winner.value === 'human') {\n\n\t\t// Update the human deck\n\t\tdeckHuman.value = [\n\t\t\tdeckHuman.value.at(-1) as CardType,\n\t\t\tdeckComputer.value.at(-1) as CardType,\n\t\t\t...deckBoard.value,\n\t\t\t...deckHuman.value.slice(0, -1)\n\t\t];\n\n\t\t// Update the computer and board decks\n\t\tdeckComputer.value = deckComputer.value.slice(0, -1);\n\t\tdeckBoard.value = [];\n\n\t\t// Update board state\n\t\tcomputerCardVisible.value = false;\n\t\tshowNextRoundButton.value = false;\n\t\thumanCardInteractive.value = true;\n\n\t\t// Update message box\n\t\tupdateMessageBox(availableMessages.value.humanadded);\n\t\tupdateMessageBox(availableMessages.value.clickstat);\n\t}\n\n\tif (winner.value === 'computer') {\n\n\t\t// Update computer deck\n\t\tdeckComputer.value = [\n\t\t\tdeckComputer.value.at(-1) as CardType,\n\t\t\tdeckHuman.value.at(-1) as CardType,\n\t\t\t...deckBoard.value,\n\t\t\t...deckComputer.value.slice(0, -1)\n\t\t];\n\n\t\t// Update human and board decks\n\t\tdeckHuman.value = deckHuman.value.slice(0, -1);\n\t\tdeckBoard.value = [];\n\n\t\t// Update board state\n\t\tcomputerCardVisible.value = true;\n\t\tshowNextRoundButton.value = false;\n\t\thumanCardInteractive.value = false;\n\n\t\t// Update message box\n\t\tupdateMessageBox(availableMessages.value.computeradded);\n\t\tupdateMessageBox(availableMessages.value.computerplay);\n\n\t\t// Since the computer won we need to play its next hand\n\t\t// So we grab the face card, extract a random property\n\t\t// and pass the arguments to the calculateWin function\n\t\tconst computerCard = deckComputer.value.at(-1) as CardType;\n\t\tconst animal = computerCard.name;\n\t\tconst properties = getRandomProperties(computerCard.properties, 1);\n\t\tconst { name, value } = properties[0];\n\t\tcalculateWin(animal, name, Number(value), 'computer');\n\t}\n\n\tif (winner.value === 'tie') {\n\n\t\t// Update the board deck\n\t\tdeckBoard.value = [\n\t\t\tdeckHuman.value.at(-1) as CardType,\n\t\t\tdeckComputer.value.at(-1) as CardType,\n\t\t\t...deckBoard.value\n\t\t];\n\n\t\t// Update the computer and human decks\n\t\tdeckComputer.value = deckComputer.value.slice(0, -1);\n\t\tdeckHuman.value = deckHuman.value.slice(0, -1);\n\n\t\t// Update the board state\n\t\tcomputerCardVisible.value = false;\n\t\tshowNextRoundButton.value = false;\n\t\thumanCardInteractive.value = true;\n\n\t\t// Update the message box\n\t\tupdateMessageBox(availableMessages.value.boardadded);\n\t\tupdateMessageBox(availableMessages.value.clickstat);\n\t}\n\n\t// Finally we work out, following all the changes, whether\n\t// either the computer or human player has won, and update the\n\t// the board accordingly\n\tif (deckHuman.value.length === cards.value.length) {\n\t\tdeckComputer.value = [deckHuman.value.at(-1) as CardType];\n\t\tcomputerCardVisible.value = false;\n\t\thumanCardVisible.value = false;\n\t\tresetMessageBox();\n\t\tupdateMessageBox(availableMessages.peek().humanwinner);\n\t}\n\t\n\tif (deckComputer.value.length === cards.value.length) {\n\t\tdeckHuman.value = [deckComputer.value.at(-1) as CardType];\n\t\tcomputerCardVisible.value = false;\n\t\thumanCardVisible.value = false;\n\t\tresetMessageBox();\n\t\tupdateMessageBox(availableMessages.peek().computerwinner);\n\t}\n\n}\n","import { SyntheticEvent, KeyboardEvent } from 'react';\n\nimport { PropertyType } from '../../../types';\n\nimport { calculateWin } from '../../../helpers/game';\n\nimport style from './style.module.css';\n\ninterface CardPropertiesProps {\n\tanimal: string;\n\tproperties: PropertyType[];\n\tinteractive: boolean;\n}\n\n/**\n * In case the properties in the data are not correctly added\n * this function sorts them before rendering\n *\n * @param {PropertyType} a\n * @param {PropertyType} b\n * @return {array}\n */\nfunction sortPropertiesbyName(a: PropertyType, b: PropertyType) {\n\treturn a.name.localeCompare(b.name);\n}\n\n/**\n * CardProperties\n *\n * A list of card properties (or statistics). If \"interactive\" the\n * component returns a list of buttons, otherwise a simple list\n *\n * @param {CardPropertiesProps} { properties, interactive }\n * @return {React.Element} CardProperties component\n */\nfunction CardProperties({ animal, properties, interactive }: CardPropertiesProps) {\n\t\n\tfunction handleKey(e: KeyboardEvent) {\n\t\tif (e.key === 'Enter') {\n\t\t\tconst { dataset: { name, value } } = e.target as HTMLButtonElement;\n\t\t\tif (name && value) calculateWin(animal, name, Number(value), 'human');\n\t\t}\n\t}\n\n\tfunction handleClick(e: SyntheticEvent) {\n\t\tconst { dataset: { name, value } } = e.currentTarget as HTMLButtonElement;\n\t\tif (name && value) calculateWin(animal, name, Number(value), 'human');\n\t}\n\t\n\treturn (\n\t\t<ul className={style.properties}>\n\t\t\t{properties.sort(sortPropertiesbyName).map((property: PropertyType) => {\n\n\t\t\t\tconst cn = [\n\t\t\t\t\tstyle.property,\n\t\t\t\t\tinteractive && style.interactive\n\t\t\t\t].join(' ');\n\n\t\t\t\treturn (\n\t\t\t\t\t<li key={property.id} className={cn}>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tdata-name={property.name}\n\t\t\t\t\t\t\tdata-value={property.value}\n\t\t\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\t\t\tonKeyDown={handleKey}\n\t\t\t\t\t\t\tdisabled={!interactive}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span>{property.name}</span>\n\t\t\t\t\t\t\t<span>{property.value}</span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t})}\n\t\t</ul>\n\t);\n\n}\n\nexport default CardProperties;\n","import { CardType } from '../../types';\n\nimport CardImage from './CardImage';\nimport CardProperties from './CardProperties';\n\nimport style from './style.module.css';\n\n/**\n * Card\n *\n * A simple card component with a header, and image, and\n * a set of properties. The card can be toggled between\n * interactive/non-interactive, and visible and invisible.\n * An interactive card has buttons enabled to register clicks\n * from the player.\n *\n * @param {CardType} { name, avatar, properties }\n * @return {React.Element} Card component\n */\nfunction Card(props: CardType) {\n\t\n\tconst {\n\t\tname,\n\t\timage,\n\t\tvisible = true,\n\t\tproperties,\n\t\tinteractive = false,\n\t} = props;\n\n\tconst containerCn = [\n\t\tstyle.container\n\t].join(' ');\n\n\tconst cardCn = [\n\t\tstyle.card,\n\t\t!visible && style.invisible,\n\t\tinteractive && style.interactive\n\t].join(' ');\n\t\n\treturn (\n\t\t<section className={containerCn}>\n\t\t\t<section className={cardCn}>\n\t\t\t\t\n\t\t\t\t<header className={style.name}>\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t</header>\n\n\t\t\t\t<CardImage\n\t\t\t\t\tsrc={image.name}\n\t\t\t\t/>\n\n\t\t\t\t<CardProperties\n\t\t\t\t\tanimal={name}\n\t\t\t\t\tproperties={properties}\n\t\t\t\t\tinteractive={interactive}\n\t\t\t\t/>\n\n\t\t\t</section>\n\n\t\t</section>\n\t);\n\n}\n\nexport default Card;\n","import { ReactNode } from 'react';\n\nimport style from './style.module.css';\n\ninterface GridProps {\n\tchildren: ReactNode;\n\tonlyoneRow?: boolean;\n}\n\nfunction Grid({ children, onlyoneRow = false }: GridProps) {\n\t\n\tconst cn = [\n\t\tstyle.grid,\n\t\tonlyoneRow && style.onlyOneRow\n\t].join(' ');\n\t\n\treturn (\n\t\t<section className={cn}>\n\t\t\t{children}\n\t\t</section>\n\t);\n}\n\nexport default Grid;\n","import { NavLink } from 'react-router-dom';\n\nimport style from './style.module.css';\n\ninterface NavLinkProps {\n\tisActive: boolean;\n\tisPending: boolean;\n}\n\nfunction checkNavItemStatus({ isActive, isPending }: NavLinkProps) {\n\tif (isPending) return style.pending;\n\tif (isActive) return style.active;\n\treturn '';\n}\n\n/**\n * Nav\n * @return {React.Element} Nav component\n */\nfunction Nav() {\n\treturn (\n\t\t<nav className={style.nav}>\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink\n\t\t\t\t\t\tto=\"/startgame\"\n\t\t\t\t\t\tclassName={(props) => checkNavItemStatus(props)}\n\t\t\t\t\t>Start game\n\t\t\t\t\t</NavLink>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink\n\t\t\t\t\t\tto=\"/instructions\"\n\t\t\t\t\t\tclassName={(props) => checkNavItemStatus(props)}\n\t\t\t\t\t>Instructions\n\t\t\t\t\t</NavLink>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<NavLink\n\t\t\t\t\t\tto=\"/viewcards\"\n\t\t\t\t\t\tclassName={(props) => checkNavItemStatus(props)}\n\t\t\t\t\t>View Cards\n\t\t\t\t\t</NavLink>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</nav>\n\t);\n}\n\nexport default Nav;\n","import { Link } from 'react-router-dom';\n\nimport Nav from '../Nav';\n\nimport style from './style.module.css';\n\ninterface HeaderProps {\n\ttitle: string;\n}\n\n/**\n * Header\n * @return {React.Element} Header component\n */\nfunction Header({ title }: HeaderProps) {\n\treturn (\n\t\t<header className={style.header}>\n\t\t\t<h1><Link to=\"/\">{title}</Link></h1>\n\t\t\t<Nav />\n\t\t</header>\n\t);\n}\n\nexport default Header;\n","import { messages, showNextRoundButton } from '../../store';\n\nimport { playNextRound } from '../../helpers/game';\n\nimport style from './style.module.css';\n\n/**\n * MessageBox\n *\n * Describes the board situation for the player\n *\n * @param {MessageBoxProps} { sentences }\n * @return {React.Element}\n */\nfunction MessageBox() {\n\n\tfunction handleClick() {\n\t\tplayNextRound();\n\t}\n\n\treturn (\n\t\t<section className={style.messageBox}>\n\t\t\t{messages.value.map(message => {\n\n\t\t\t\tconst cn = [\n\t\t\t\t\tstyle.message,\n\t\t\t\t\tmessage.type === 'underline' && style.underline\n\t\t\t\t].join(' ');\n\n\t\t\t\treturn <p className={cn} key={message.id}>{message.text}</p>;\n\t\t\t})}\n\t\t\t{showNextRoundButton.value && (\n\t\t\t\t<button\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\tclassName={style.nextRound}\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t>Play next round\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</section>\n\t);\n}\n\nexport default MessageBox;\n","import style from './style.module.css';\n\ninterface StatusProps {\n\ttype: string;\n\tnumberOfCards: number;\n\ttotalCards: number;\n}\n\n/**\n * Status\n *\n * Shows the status of the player's deck\n *\n * @param {StatusProps} { status }\n * @return {React.Element}\n */\nfunction Status({ type, numberOfCards, totalCards }: StatusProps) {\n\treturn (\n\t\t<section className={style.status}>\n\t\t\t<h3>{type}</h3>\n\t\t\t<p>{`${numberOfCards} / ${totalCards} cards`}</p>\n\t\t</section>\n\t);\n}\n\nexport default Status;\n","import { Status, Card } from '../index';\n\nimport { CardType } from '../../types';\n\nimport {\n\tcomputerCardVisible,\n\thumanCardInteractive,\n\thumanCardVisible\n} from '../../store';\n\ninterface DeckProps {\n\ttype: string;\n\tdeck: CardType[];\n\ttotalCards: number;\n\tinteractive?: boolean\n}\n\n/**\n * Deck\n *\n * The player (human/computer) deck\n *\n * @param {DeckProps} { deck }\n * @return {React.Element}\n */\nfunction Deck({ type, deck, totalCards, interactive }: DeckProps) {\n\n\tfunction isVisible() {\n\t\treturn (type === 'computer' && computerCardVisible.value === true)\n\t\t\t|| (type === 'human' && humanCardVisible.value === true);\n\t}\n\n\treturn (\n\t\t<section>\n\t\t\t<Status\n\t\t\t\ttype={type}\n\t\t\t\tnumberOfCards={deck.length}\n\t\t\t\ttotalCards={totalCards}\n\t\t\t/>\n\t\t\t{deck.slice(-1).map((card, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\tid={card.id}\n\t\t\t\t\t\tvisible={isVisible()}\n\t\t\t\t\t\tname={card.name}\n\t\t\t\t\t\timage={card.image}\n\t\t\t\t\t\tproperties={card.properties}\n\t\t\t\t\t\tinteractive={interactive && humanCardInteractive.value === true}\n\t\t\t\t\t\tcount={index}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t\t\n\t\t\t})}\n\t\t</section>\n\t);\n}\n\nexport default Deck;\n","import { useEffect } from 'react';\n\nimport { MessageBox, Deck, Board } from '../../components';\n\nimport { deckComputer, deckHuman, cards } from '../../store';\n\nimport { initialiseGame } from '../../helpers/game';\n\nimport style from './style.module.css';\n\n/**\n * Game\n *\n * Sets up the board for playing. It comprises a computer deck,\n * a message box, and a human deck.\n *\n * @return {React.Element} Game component/page\n */\nfunction Game() {\n\t\n\tuseEffect(() => {\n\t\tinitialiseGame();\n\t}, []);\n\t\n\tconst totalCards = cards.value.length;\n\n\treturn (\n\t\t<main className={style.main}>\n\t\t\t<Board>\n\t\t\t\t<Deck\n\t\t\t\t\ttype=\"computer\"\n\t\t\t\t\ttotalCards={totalCards}\n\t\t\t\t\tdeck={deckComputer.value}\n\t\t\t\t/>\n\t\t\t\t<MessageBox />\n\t\t\t\t<Deck\n\t\t\t\t\ttype=\"human\"\n\t\t\t\t\ttotalCards={totalCards}\n\t\t\t\t\tdeck={deckHuman.value}\n\t\t\t\t\tinteractive\n\t\t\t\t/>\n\t\t\t</Board>\n\t\t</main>\n\t);\n}\n\nexport default Game;\n","import style from './style.module.css';\n\nimport Card from '../../components/Card';\nimport Grid from '../../components/Grid';\n\nimport { cards } from '../../store';\n\nimport { getRandomCards } from '../../helpers/cards';\n\n/**\n * Home\n *\n * Simple home page describing the game, and showing a random\n * sample of three cards\n *\n * @return {React.Element} Home component/page\n */\nfunction Home() {\n\treturn (\n\t\t<main className={style.main}>\n\t\t\t<section className={style.intro}>\n\t\t\t\t<p>A fun card game for all the family</p>\n\t\t\t\t<p>Play against a deadly computer opponent and win all the cards</p>\n\t\t\t</section>\n\t\t\t<Grid onlyoneRow>\n\t\t\t\t{getRandomCards(cards.peek(), 3).map((card, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\tid={card.id}\n\t\t\t\t\t\t\tname={card.name}\n\t\t\t\t\t\t\timage={card.image}\n\t\t\t\t\t\t\tproperties={card.properties}\n\t\t\t\t\t\t\tinteractive={false}\n\t\t\t\t\t\t\tcount={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Grid>\n\t\t</main>\n\t);\n}\n\nexport default Home;\n","/* eslint-disable max-len */\nimport style from './style.module.css';\n\n/**\n * Instructions\n *\n * @return {React.Element} Instructions component/page\n */\nfunction Instructions() {\n\treturn (\n\t\t<main className={style.main}>\n\t\t\t<section className={style.step}>\n\t\t\t\t<header>\n\t\t\t\t\t<h2>The Goal</h2>\n\t\t\t\t</header>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>To collect all the cards.</li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t\t<section className={style.step}>\n\t\t\t\t<header>\n\t\t\t\t\t<h2>The Game</h2>\n\t\t\t\t</header>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Each card has a set of statistics. Your aim in each round is to choose a statistic higher than the corresponding one on the other player&apos;s card.</li>\n\t\t\t\t\t<li>If it&apos;s higher than the opponent&apos;s card the player wins the round and the opponent&apos;s card.</li>\n\t\t\t\t\t<li>If it&apos;s lower the opponent wins the round and the player&apos;s card.</li>\n\t\t\t\t\t<li>If it&apos;s a tie the cards are placed on the board and a new round begins. The winner of the next round gets the winning card and all the cards on the board.</li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t</main>\n\t);\n}\n\nexport default Instructions;\n","import Card from '../../components/Card';\nimport Grid from '../../components/Grid';\n\nimport { CardType } from '../../types';\n\nimport { cards } from '../../store';\n\nimport { sortCards } from '../../helpers/cards';\n\n/**\n * ViewCards\n *\n * Sorts and shows a grid of all the animal cards\n *\n * @return {React.Element} ViewCards component/page\n */\nfunction ViewCards() {\n\treturn (\n\t\t<main>\n\t\t\t<Grid>\n\t\t\t\t{sortCards(cards.value).map((card: CardType, index: number) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\tid={card.id}\n\t\t\t\t\t\t\tname={card.name}\n\t\t\t\t\t\t\timage={card.image}\n\t\t\t\t\t\t\tproperties={card.properties}\n\t\t\t\t\t\t\tinteractive={false}\n\t\t\t\t\t\t\tcount={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Grid>\n\t\t</main>\n\t);\n}\n\nexport default ViewCards;\n","import { Routes, Route } from 'react-router-dom';\n\nimport { Header } from '../../components';\n\nimport { Game, Home, Instructions, ViewCards } from '../../pages';\n\n/**\n * Sets up the header, and routing between the app pages\n *\n * @return {React.Element}\n */\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Header title=\"Ferocious Beasts Top Trumps\" />\n\t\t\t<Routes>\n\t\t\t\t<Route path=\"/\" element={<Home />} />\n\t\t\t\t<Route path=\"/startgame\" element={<Game />} />\n\t\t\t\t<Route path=\"/instructions\" element={<Instructions />} />\n\t\t\t\t<Route path=\"/viewcards\" element={<ViewCards />} />\n\t\t\t</Routes>\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './layouts/App';\n\nimport './styles/global.css';\n\nReactDOM.createRoot(document.querySelector('#root')!).render(\n\t<React.StrictMode>\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t</React.StrictMode>,\n);\n"],"names":["Board","children","jsx","style","CardImage","src","cn","cards","signal","cardsData","availableMessages","availableMessagesData","deckComputer","deckBoard","deckHuman","messages","computerCardVisible","humanCardVisible","humanCardInteractive","showNextRoundButton","winner","currentComputerCard","computed","currentHumanCard","toCapitalCase","str","word","shuffleArray","arr","j","temp","getRandomCards","number","getRandomProperties","properties","sortCards","a","b","getComputerCardDetails","name","card","prop","getHumanCardDetails","getUUID","resetMessageBox","updateMessageBox","message","type","initialiseGame","shuffled","len","calculateWin","animal","value","cardComputerDetails","cardHumanDetails","playNextRound","computerCard","sortPropertiesbyName","CardProperties","interactive","handleKey","e","handleClick","property","jsxs","Card","props","image","visible","containerCn","cardCn","Grid","onlyoneRow","checkNavItemStatus","isActive","isPending","Nav","NavLink","Header","title","Link","MessageBox","Status","numberOfCards","totalCards","Deck","deck","isVisible","index","Game","useEffect","Home","Instructions","ViewCards","App","Fragment","Routes","Route","ReactDOM","React","BrowserRouter"],"mappings":"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"}